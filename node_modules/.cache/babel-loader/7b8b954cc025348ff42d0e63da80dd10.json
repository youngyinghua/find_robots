{"ast":null,"code":"import{CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILED}from\"./constants\";export var setSearchField=function setSearchField(text){return{type:CHANGE_SEARCH_FIELD,payload:text};};export var requestRobots=function requestRobots(dispatch){dispatch({type:REQUEST_ROBOTS_PENDING});fetch(\"https://jsonplaceholder.typicode.com/users\").then(function(response){return response.json();}).then(function(data){return dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data});}).catch(function(error){return dispatch({type:REQUEST_ROBOTS_FAILED,payload:error});});};","map":{"version":3,"sources":["/Users/wawa/Desktop/web/findrobots/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,OACEA,mBADF,CAEEC,sBAFF,CAGEC,sBAHF,CAIEC,qBAJF,KAKO,aALP,CAOA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,IAAD,QAAW,CACvCC,IAAI,CAAEN,mBADiC,CAEvCO,OAAO,CAAEF,IAF8B,CAAX,EAAvB,CAKP,MAAO,IAAMG,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,QAAD,CAAc,CACzCA,QAAQ,CAAC,CAAEH,IAAI,CAAEL,sBAAR,CAAD,CAAR,CACAS,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACQ,SAACC,QAAD,QAAcA,CAAAA,QAAQ,CAACC,IAAT,EAAd,EADR,EAEGF,IAFH,CAEQ,SAACG,IAAD,QAAUL,CAAAA,QAAQ,CAAC,CAAEH,IAAI,CAAEJ,sBAAR,CAAgCK,OAAO,CAAEO,IAAzC,CAAD,CAAlB,EAFR,EAGGC,KAHH,CAGS,SAACC,KAAD,QACLP,CAAAA,QAAQ,CAAC,CAAEH,IAAI,CAAEH,qBAAR,CAA+BI,OAAO,CAAES,KAAxC,CAAD,CADH,EAHT,EAMD,CARM","sourcesContent":["import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((error) =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n    );\n};\n"]},"metadata":{},"sourceType":"module"}